[{"body":"The tool offers standard rules by default which, with a few input parameters, allow verifications to be made on the metadata of the commit such as the user's email or the message of the commit or even on the files (Size, name , extension …)\n","excerpt":"The tool offers standard rules by default which, with a few input …","ref":"/watchdog/docs/quickstart/","title":"Getting Started"},{"body":"A good commit message should tell you what has changed and why. The how, that is, how to make these changes, does not have to be explained. Reading the code and highlighting changes via a diff is self-explanatory. For example checks if the commit messages respect the conventional validation format: https://www.conventionalcommits.org/en/v1.0.0/\nversion:\"1.1.0\"hooks:- name:genericrules:- type:commitconditions:- type:lengthcondition:le 120- type:commitconditions:# Angular guidelines https://github.com/angular/angular/blob/master/CONTRIBUTING.md- type:patterncondition:(?m)^(build|ci|docs|feat|fix|perf|refactor|style|test)\\([a-z]+\\):\\s([a-z\\.\\-\\s]+)rejection_message:\u003eMessage must be formatted like type(scope): subject, type Must be one of the following: * build: Changes that affect the build system or external dependencies (example scopes: gulp, broccoli, npm) * ci: Changes to our CI configuration files and scripts (example scopes: Circle, BrowserStack, SauceLabs) * docs: Documentation only changes * feat: A new feature * fix: A bug fix * perf: A code change that improves performance * refactor: A code change that neither fixes a bug nor adds a feature * style: Changes that do not affect the meaning of the code (white-space, formatting, missing semi-colons, etc) * test: Adding missing tests or correcting existing tests","excerpt":"A good commit message should tell you what has changed and why. The …","ref":"/watchdog/docs/examples/commits/","title":"Conventional Commits"},{"body":"version:\"1.1.0\"hooks:- name:generictype:pre-receiverules:- type:branchconditions:- type:patterncondition:(feature|release|hotfix)\\/[a-z\\d-_.]+rejection_message:Branch name must match gitflow naming","excerpt":"version:\"1.1.0\"hooks:- name:generictype:pre-receiverules:- …","ref":"/watchdog/docs/examples/gitflow/","title":"Gitflow"},{"body":"Downloading Go Lang Installation Files Visit Go Lang’s official download page to download the installer according to your operating system. See Downloads\n Go Lang is currently supported only on x64 based processors.\n Setting up on Windows  Double click the MSI installer, you just downloaded to start the Go Lang installation on your Windows system. Follow the prompts to install the Go tools. By default, the installer puts the Go distribution in C:\\Go. The installer should put the C:\\Go\\bin directory in your PATH environment variable. You may need to restart any open command prompts for the change to take effect.  Setting up on Linux  Extract the .tar.gz archive you just downloaded to /usr/local, creating a Go tree in /usr/local/go.  $ sudo tar -C /usr/local -xzf go1.15.2.linux-amd64.tar.gz  Change the archive name as per requirement. go1.15.2.linux-amd64.tar.gz is the latest version available at the time of this writing.\n  Add /usr/local/go/bin to the PATH environment variable. You can do this by adding this line to your /etc/profile (for a system-wide installation) or $HOME/.profile:  $ export PATH=$PATH:/usr/local/go/bin Verifying your installation $ go version  Create a file named main.go using the text editor of your choice, and copy-paste the following content into it.  package main import \"fmt\" func main() { fmt.Printf(\"Hello, World..!!\\n\") }  Save the file and go back to the terminal and run the following command to compile the code into a binary.  $ go build  The previous step creates a binary named main in the same directory. Simply run the executable to run the code. If the installation had been correct, the exe will print Hello, World..!!  ","excerpt":"Downloading Go Lang Installation Files Visit Go Lang’s official …","ref":"/watchdog/docs/contribution/install/","title":"Install"},{"body":"Docker Create the Watchdog Docker image with the following command.\ndocker build \\  --tag groupe-edf/watchdog \\  --file build/Dockerfile \\  --build-arg=http_proxy=$HTTPS_PROXY \\  --build-arg=https_proxy=$HTTPS_PROXY \\  --build-arg=CGO_ENABLED=0 \\  . ","excerpt":"Docker Create the Watchdog Docker image with the following command. …","ref":"/watchdog/docs/deployment/release/","title":"Release"},{"body":"Usage client-side On the developer side, to invoke customs hooks, the user must add a configuration file under the name of .githooks.yml or .githook.yaml in the root of the project.\n$ ll /workspaces/project-name |__ docs/ |__ src/ |__ tests/ |__ .gitignore |__ .githooks.yml .githooks.yml In this file the developer or rather the maintainer of the project will define the different rules that will be executed in the remote Git repository. The following table describes the schema and the different attributes of the file.\n   Attribut Description Default Optional Type     version Version of the .githooks file, the tool will allow you to accept different versions of the diagram   String   hooks[] Liste des hooks à déclencher   String   hook.name Nom du hook   String   hook.type Git hook type, it can have one of the values pre-receive, update, post-receive. See Customizing Git - Git Hooks pre-receive  String   hook.rejection_message Global rejection message  Yes String   hook.rules[] List of custom hook rules   String   hook.rule.type Type of the rule to be triggered, it can have one of the following values branch, commit, file, jira, security. See Handlers   String   hook.rule.disabled This attribute enables or disables the rule true Yes String   hook.rule.conditions[] List of conditions that will trigger the rule. They are specific to each rule   String   hook.rule.condition.type Type of condition, the value of this attribute may vary from one rule to another   String   hook.rule.condition.pattern It is a regular expression that describes the condition to be satisfied. See Syntaxe   String   hook.rule.condition.rejection_message Rule-specific rejection message. By default all customs hooks offer rejection messages. See Acceptance and rejection messages  Yes String   hook.rule.condition.ignore This option allows you to ignore not to block the push even if the rule is not satisfied false Yes String   hook.rule.condition.skip A regular expression that allows the rule to be ignored if it is satisfied. See Syntaxe. Useful in the case of automatic commits generated during Merge Requests  Yes String    ","excerpt":"Usage client-side On the developer side, to invoke customs hooks, the …","ref":"/watchdog/docs/quickstart/usage/","title":"Usage"},{"body":"Developing Watchdog If you wish to work on Watchdog itself, you'll first need Go installed on your machine. Go version 1.15.2+ is required.\nFor local dev first make sure Go is properly installed, including setting up a GOPATH. Ensure that $GOPATH/bin is in your path as some distributions bundle old version of build tools. Next, clone this repository. Watchdog uses Go Modules, so it is recommended that you clone the repository outside of the GOPATH. You can then download any required build tools by bootstrapping your environment:\n$ make bootstrap Prerequisite  Clone the source code  $ git clone https://github.com/groupe-edf/watchdog Now you can build and run Watchdog by one of the following ways\nBuild and run Watchdog locally  Build Watchdog binary  # Fetch the dependencies $ go mod download # Build the binary $ go build -o watchdog Run Watchdog binary  ./watchdog version Making A Change  Before making any significant changes, please open an issue. Discussing your proposed changes ahead of time will make the contribution process smooth for everyone. Once we’ve discussed your changes and you’ve got your code ready, make sure that build steps pass. Open your pull request against develop branch. To avoid build failures in CI, run  $ make lint $ make test-unit This will check if the code is properly formatted, linted.\n Run security and e2e tests  $ make test-security $ make test-integration  Make sure your pull request has good commit messages Try to squash unimportant commits and rebase your changes on to develop branch, this will make sure we have clean log of changes.  ","excerpt":"Developing Watchdog If you wish to work on Watchdog itself, you'll …","ref":"/watchdog/docs/contribution/bootstrap/","title":"Bootstrap"},{"body":"Watchdog configuration uses the YAML format.\nThe file to be edited can be found in:\n /etc/watchdog/config.yaml on *nix systems when Watchdog is executed as root ~/.watchdog/config.yaml on *nix systems when Watchdog is executed as non-root ./config.yaml on other systems  Configuration example:\nconcurrent:4logs_level:\"warning\"","excerpt":"Watchdog configuration uses the YAML format.\nThe file to be edited can …","ref":"/watchdog/docs/configuration/","title":"Configuration"},{"body":"Watchdog offers predefined custom hooks allowing basic / advanced controls on Git actions\n","excerpt":"Watchdog offers predefined custom hooks allowing basic / advanced …","ref":"/watchdog/docs/handlers/","title":"Handlers"},{"body":"From the Binary Releases Every release of Watchdog provides binary releases for a variety of OSes. These binary versions can be manually downloaded and installed.\n Download your desired version Unpack it tar -zxvf watchdog-v1.2.0-linux-amd64.tar.gz Find the watchdog binary in the unpacked directory, and move it to its desired destination mv watchdog-v1.2.0-linux-amd64 /usr/local/bin/watchdog Make it executable chmod +x /usr/local/bin/watchdog  watchdog version ","excerpt":"From the Binary Releases Every release of Watchdog provides binary …","ref":"/watchdog/docs/deployment/install/","title":"Install"},{"body":"The rejection messages are written in the form of a template that can be enriched with the already predefined substitution variables\nVariables    Variable Description     {{ .Branch }} The name of the branch.   {{ .Commit.Author.Email }} Email of the author of the commit.   {{ .Commit.Author.Name }} The name of the author of the commit.   {{ .Commit.Subject }} The commit message.   {{ .Commit.Date }} The date of the commit.   {{ .Commit.Hash }} The hash of the commit.   {{ .Commit.ShortHash }} The 8 character hash of the commit.   {{ .Condition.Condition }} La condition définit.   {{ .Object }} It can have several values, for example the name of the scanned file in the manager File.   {{ .Operator }} The operator used in the condition.   {{ .Operand }} The comparison value.   {{ .Tag }} The name of the tag.   {{ .Value }} It can have several values, for example the size of the file in the File manager or confidential information detected in the Security manager.    Example\nrejection_message:File {{ .Object }} size {{ .Value }} greater or equal than {{ .Operand }}","excerpt":"The rejection messages are written in the form of a template that can …","ref":"/watchdog/docs/quickstart/messages/","title":"Messages"},{"body":"version:\"1.0.0\"hooks:- name:globalrules:- type:commitconditions:- type:lengthcondition:gt 20rejection_message:Commit message should exceed {{ .Operand }} characters","excerpt":"version:\"1.0.0\"hooks:- name:globalrules:- type:commitconditions:- …","ref":"/watchdog/docs/examples/","title":"Examples"},{"body":"Usage server-side Watchdog can be configured only in the server side of the Git repository (For the moment a bare repository), it is compatible with different Git solutions like Gitea, Gogs, Gitlab.\nIn our case we will focus on installing Watchdog on the Gitlab platform. See instructions.\nWe have the possibility to install the tool in different levels of Gitlab\n Global By group By project  For a global deployment, you must create one of the pre-receive.d, post-receive.d or update.d folders in the /opt/gitlab/embedded/service/gitlab-shell/hooks directory and add a script that will launch note CLI\n#!/bin/sh HOOKS=(\"pre-receive\" \"post-receive\" \"update\") HOOK_TYPE=$(cd $(dirname \"${BASH_SOURCE[0]}\") \u003e/dev/null 2\u003e\u00261 \u0026\u0026 echo ${PWD##*/}) while read -r OLDREV NEWREV REFNAME; do /usr/local/bin/watchdog analyze \\  --docs-link=\"https://groupe-edf.github.io/watchdog/docs/\" \\  --hook-type=\"pre-receive\" \\  --hook-input=\"$OLDREV$NEWREV$REFNAME\" \\  --logs-path=\"watchdog.log\" \\  --logs-level=\"info\" \\  --verbose=\"true\" status=$? if [ $status -eq 1 ]; then exit 1 fi done Options    Option Description     --docs-link Allows you to define the link to the Custom Hooks documentation   --hook-input This data is automatically filled in upon receipt of a Git git push package   --hook-type Allows you to specify to the watchdog CLI the type of hooks it has just received to pass it to the different managers. By default pre-receive   --logs-path Allows you to define the path for writing logs. By default it is /var/log/watchdog/watchdog.log   --logs-level Allows to define the level of logs to write, can take one of the following values: debug, error, fatal, info, panic, trace and warning. By default it is info   --verbose Allows you to view more information about running Custom Hooks in the Developer Console. Default true   --help, -h Show help/usage   --version, -v Print version    The WATCHDOG_* environment variables are used to pass the adjustment parameters of certain services\n","excerpt":"Usage server-side Watchdog can be configured only in the server side …","ref":"/watchdog/docs/deployment/gitlab/","title":"Gitlab"},{"body":"When the developer pushes his changes to the remote repository, the watchdog analysis of the various commits will return successfully with a detailed list of low severity issues.\nremote: remote: -----BEGIN REJECTION MESSAGES----- remote: GL-HOOK-ERR: severity=low handler=file condition=extension commit=eda373cc message=\"'*.exe' files are not allowed\" remote: -----END REJECTION MESSAGES----- remote: remote: remote: ######################################### remote: # # remote: # Your push was successfully accepted # remote: # # remote: ######################################### remote: remote: Operation took 43.319478ms Either fail with a detailed list of high severity issues\nremote: remote: -----BEGIN REJECTION MESSAGES----- remote: GL-HOOK-ERR: severity=high handler=file condition=extension commit=eda373cc message=\"'*.exe' files are not allowed\" remote: -----END REJECTION MESSAGES----- remote: remote: remote: #################################################### remote: # # remote: # Your push was rejected because previous errors # remote: # # remote: #################################################### remote: remote: Operation took 43.319478ms Format logfmt The default output format of the messages is [logfmt] (https://brandur.org/logfmt) prefixed by GL-HOOK-ERR: to have the possibility of uploading these messages on the Gitlab graphical interface in the case of a direct modification of the code on Gitlab.\nseverity=high handler=file condition=extension commit=eda373cc message=\"'*.exe' files are not allowed\"  severity Issue severity high, medium or low handler Name of the handler that detected the problem condition Name of the condition that detected the problem commit The current hash of the commit (On 8 characters) message Issue description  Only high severity issues block commits from being persisted in the Git repository.\njson [ { \"author\": \"Habib MAALEM\", \"commit\": \"9560bbeb3b93d9a6d545133dea3e26e0f1fd7a66\", \"condition\": \"secret\", \"email\": \"habib.maalem@gmail.com\", \"handler\": \"security\", \"leaks\": [ { \"file\": \"src/main/resources/rsa_server.key\", \"line_number\": 1, \"rule\": \"ASYMMETRIC_PRIVATE_KEY\", \"severity\": \"MAJOR\", \"tags\": [ \"key\" ] } ], \"message\": \"Secrets, token and passwords are forbidden, `src/main/resources/rsa_server.key:----***********************`\", \"severity\": \"low\" } ] ","excerpt":"When the developer pushes his changes to the remote repository, the …","ref":"/watchdog/docs/quickstart/output/","title":"Output"},{"body":"","excerpt":"","ref":"/watchdog/docs/contribution/test/","title":"Test"},{"body":"","excerpt":"","ref":"/watchdog/docs/deployment/","title":"Deployment"},{"body":"logrotate is designed to ease administration of systems that generate large numbers of log files. It allows automatic rotation, compression, removal, and mailing of log files. Each log file may be handled daily, weekly, monthly, or when it grows too large.\nThe logs are saved in /var/log/watchdog/*.Log, here is an example of a logrotate configuration\n/var/log/watchdog/*.log { daily rotate 8 size 500M compress delaycompress missingok notifempty create 440 root root } ","excerpt":"logrotate is designed to ease administration of systems that generate …","ref":"/watchdog/docs/deployment/logrotate/","title":"Logrotate"},{"body":"Developers have the option of skipping checks on certain commits with the expression [skip hooks.rule.condition]. The expression is valid at\n Rule, for example: Ignore security rules of type Secret [skip hooks.security.secret] Handler, for example: Skip all security rules [skip hooks.security] All Handlers [skip hooks]  Example $ git commit -am \"chore: add dummy configuration file [skip hooks.security.secret]\" $ git commit -am \"chore: add dummy configuration file [skip hooks.security]\" $ git commit -am \"chore: add dummy configuration file [skip hooks]\" Or even better with Push Options to keep git history clean Under development\n$ git push -o security.secrets.skip $ git push -o hooks.skip=\"security.secrets,tag.semver\" # Comma separated handler.rule ","excerpt":"Developers have the option of skipping checks on certain commits with …","ref":"/watchdog/docs/quickstart/skip/","title":"Skip"},{"body":"How to Contribute to Watchdog We’d love your help!\nWatchdog is GNU General Public License and accepts contributions via Pull Requests. PRs are the main and exclusive way to contribute to the watchdog project. In order for a PR to be accepted it needs to pass a list of requirements:\n Code Coverage does not decrease. All the tests pass. Go code is idiomatic, formatted according to gofmt, and without any warnings from go lint nor go vet.  We gratefully welcome improvements to documentation as well as to code.\n","excerpt":"How to Contribute to Watchdog We’d love your help!\nWatchdog is GNU …","ref":"/watchdog/docs/contribution/","title":"Contribution Guidelinesss"},{"body":"Promtail is configured in a YAML file (usually referred to as config.yaml) which contains information on the Promtail server, where positions are stored, and how to scrape logs from files.\nserver:http_listen_port:9080grpc_listen_port:0positions:filename:/tmp/positions.yamlclients:- url:http://localhost:3100/loki/api/v1/pushscrape_configs:- job_name:watchdogstatic_configs:- targets:- localhostlabels:job:watchdog__path__:/var/log/watchdog/watchdog.log","excerpt":"Promtail is configured in a YAML file (usually referred to as …","ref":"/watchdog/docs/deployment/promtail/","title":"Promtail"},{"body":"Regular Expression This is a generic rule where you can use regular expressions to define the naming conventions for branches. See Syntax\nversion:\"1.0.0\"hooks:- name:globaltype:pre-receiverules:- type:branchconditions:- type:patterncondition:(feature|release|hotfix)\\/[a-z\\d-_.]+rejection_message:Branch `{{ .Branch }}` must match Gitflow naming convention","excerpt":"Regular Expression This is a generic rule where you can use regular …","ref":"/watchdog/docs/handlers/branch/","title":"Branch Handler"},{"body":"Regular Expression This is a generic rule where you can use regular expressions to define conditions to accept or reject commit messages. See Syntax.\nversion:\"1.0.0\"hooks:- name:globalrules:- type:commitconditions:- type:patterncondition:(?m)^(build|ci|docs|feat|fix|perf|refactor|style|test)\\([a-z]+\\):\\s([a-z\\.\\-\\s]+)skip:Merge commitCommit message length This rule forces users not to exceed a certain length of the commit message.\nversion:\"1.0.0\"hooks:- name:globalrules:- type:commitconditions:- type:lengthcondition:le 20rejection_message:Commit message should not exceed '{{ .Operand }}' charactersIn the condition attribute we can use one of the following predicates\n   Predicate Description     eq eqal   ne not equal   lt lower than   le lower than or equal   ge greater than or equal   gt greater than    Email It is a generic rule of type regular expression which allows to define conditions on the emails of the users to accept or refuse the commits. See Syntax.\nversion:\"1.0.0\"hooks:- name:globalrules:- type:commitconditions:- type:emailcondition:\"[a-zA-Z\\-]+@acme.com\"rejection_message:Author email '{{ .Commit.Author.Email }}' is not valid email address","excerpt":"Regular Expression This is a generic rule where you can use regular …","ref":"/watchdog/docs/handlers/commit/","title":"Commit Handler"},{"body":"Extension This rule allows developers to be prohibited from committing files that have certain extensions.\nversion:\"1.0.0\"hooks:- name:filestype:pre-receiverules:- type:fileconditions:- type:extensionrejection_message:'*.{{ .Condition.Condition }}'files are not allowedcondition:exeSize This rule is used to prevent developers from committing files that exceed the size defined in the condition.\nversion:\"1.0.0\"hooks:- name:filesrules:- type:fileconditions:- type:sizecondition:lt 5mbrejection_message:File {{ .Object }} size {{ .Value }} greater or equal than {{ .Operand }}Currently only the lt operator is supported. the size is defined in natural language and in English and in lowercase, example:\n lt 5mb lt 5 megabytes lt 512 kb  To fix this, move media files (.mp4, .mp3, .jpg, .png) from repositories that are only “supposed” to contain text to a repository hold media files that humans can’t read. The job of (git-lfs (Large File System))[https://wilsonmar.github.io/git-hooks/#git-lfs] is to move and replace binary files with a (texual) link to binary repositories.\n","excerpt":"Extension This rule allows developers to be prohibited from committing …","ref":"/watchdog/docs/handlers/file/","title":"File Handler"},{"body":"Issue This rule allows to check if the commit message contains a reference of the associated Jira ticket, this condition can be ignored with the skip: TECH attribute.\nversion:\"1.0.0\"hooks:- name:globalrules:- type:jiraconditions:- type:issueskip:TECHrejection_message:Commit message is missing the JIRA Issue JIRA-123","excerpt":"Issue This rule allows to check if the commit message contains a …","ref":"/watchdog/docs/handlers/jira/","title":"Jira Handler"},{"body":"Secrets This rule allows you to analyze the presence of sensitive and confidential information in the content of commits files, currently the rule allows you to scan.\n AWS Access Key Authentification basique Google Access Token URL de connexion MySQL, Redis, PostgreSQL Private Key  version:\"1.0.0\"hooks:- name:globalrules:- type:securityconditions:- type:secretrejection_message:Secrets, token and passwords are forbidden, `{{ .Object }}:{{ .Value }}`skip:.*.json|tests/.*Providers List of supported providers\n   Domain Platform/API Key Type Target Regular Expression Source     Cloud Amazon Web Services Access Key ID AKIA[0-9A-Z]{16}    Cloud Amazon Web Services Secret Key [0-9a-zA-Z/+]{40}    Web URI Basic Authentication (http\\|https)://[^{}[[:space:]]]+:([^{}[[:space:]]]+)@ The 'Basic' HTTP Authentication Scheme   Web NPM Base64 _auth[[:space:]]*=[[:space:]]*(?:[A-Za-z0-9+\\\\/]{4})*(?:[A-Za-z0-9+\\\\/]{2}==\\|[A-Za-z0-9+\\\\/]{3}=\\|[A-Za-z0-9+\\\\/]{4}) The Base16, Base32, and Base64 Data Encodings   Cloud Google Cloud Platform OAuth 2.0 [0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}    Cloud Google Cloud Platform API Key [A-Za-z0-9_]{21}--[A-Za-z0-9_]{8}    Database MySQL Basic Authentication mysql://[^{}[[:space:]]]+:([^{}\\[[:space:]]]+)@    Database Redis Basic Authentication (redis\\|rediss\\|redis-socket\\|redis-sentinel)://[^{}[[:space:]]]+:([^{}[[:space:]]]+)@    Communication Slack API Key xox.-[0-9]{12}-[0-9]{12}-[0-9a-zA-Z]{24}    Communication Twilio API Key 55[0-9a-fA-F]{32}    Social Media Twitter Access Token [1-9][0-9]+-[0-9a-zA-Z]{40}     ","excerpt":"Secrets This rule allows you to analyze the presence of sensitive and …","ref":"/watchdog/docs/handlers/security/","title":"Security Handler"},{"body":"SemVer This rule ensures that Tags pushed by developers respect the naming conventions described by Semantic Versioning V2.0.0. See https://semver.org/.\nversion:\"1.0.0\"hooks:- name:globalrules:- type:tagconditions:- type:semverrejection_message:Tag version `{{ .Tag }}` must respect semantic versionning v2.0.0 https://semver.org/","excerpt":"SemVer This rule ensures that Tags pushed by developers respect the …","ref":"/watchdog/docs/handlers/tag/","title":"Tag Handler"},{"body":"","excerpt":"","ref":"/watchdog/categories/","title":"Categories"},{"body":"Welcome to the Watchdog user guide! This guide shows you how to get started creating custom hooks declaratively using Watchdog.\nWhat is Watchdog? ","excerpt":"Welcome to the Watchdog user guide! This guide shows you how to get …","ref":"/watchdog/docs/","title":"Documentation"},{"body":"","excerpt":"","ref":"/watchdog/tags/","title":"Tags"},{"body":"  #td-cover-block-0 { background-image: url(/watchdog/featured-background_hu830c213ec70e85d51f3a935207ace467_2278723_960x540_fill_q75_box_top.jpg); } @media only screen and (min-width: 1200px) { #td-cover-block-0 { background-image: url(/watchdog/featured-background_hu830c213ec70e85d51f3a935207ace467_2278723_1920x1080_fill_q75_box_top.jpg); } }  Welcome to Watchdog Learn More   Download          ","excerpt":"  #td-cover-block-0 { background-image: …","ref":"/watchdog/","title":"Watchdog"}]