package response

import (
	"net/http"
	"net/url"
)

const (
	// ProblemMediaType is the default media type for a Problem response
	ProblemMediaType = "application/problem+json"
	// ProblemMediaTypeXML is the XML variant on the Problem Media type
	ProblemMediaTypeXML = "application/problem+xml"
	// DefaultURL is the default url to use for problem types
	DefaultURL = "about:blank"
)

// Problem https://tools.ietf.org/html/rfc7807 compliant struct for describing HTTP errors
type Problem interface {
	ProblemType() (*url.URL, error)
	ProblemTitle() string
}

// StatusProblem interface describing a problem with an associated Status code.
type StatusProblem interface {
	Problem
	ProblemStatus() int
}

// ValidationProblem interface describing a problem with validation errors
type ValidationProblem interface {
	StatusProblem
	ProblemErrors() []string
}

// DefaultProblem swagger:response defaultProblem
//
// Default problem implementation
type DefaultProblem struct {
	// A human-readable explanation specific to this occurrence of the problem.
	//
	// in: body
	Detail string `json:"detail,omitempty"`
	// A URI reference that identifies the specific occurrence of the problem.
	// in: body
	Instance string `json:"instance,omitempty"`
	// The HTTP status code generated by the origin server for this occurrence of the problem.
	// in: body
	Status int `json:"status,omitempty"`
	// A short, human-readable summary of the problem type
	// in: body
	Title string `json:"title,omitempty"`
	// A URI reference that identifies the problem type
	// in: body
	Type string `json:"-"`
}

// ProblemStatus return the status code of the problem
func (problem *DefaultProblem) ProblemStatus() int {
	return problem.Status
}

// ProblemTitle return the title of the problem
func (problem *DefaultProblem) ProblemTitle() string {
	return problem.Title
}

// NewProblem return new problem
func NewProblem() *DefaultProblem {
	return &DefaultProblem{Type: DefaultURL}
}

// NewStatusProblem generate a new DefaultProblem for the provided HTTP status
func NewStatusProblem(status int) *DefaultProblem {
	problem := NewProblem()
	problem.Title = http.StatusText(int(status))
	problem.Status = status
	return problem
}
